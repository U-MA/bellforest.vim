Describe Node
  Before each
    let node = bellforest#Node#new()
  End

  Describe #new(...)
    It create an empty node
      let node = bellforest#Node#new()
      Assert Equals(node._data, [])
      Assert Equals(node._position, [1, 1])
      Assert Equals(node._width, 0)
      Assert Equals(node._height, 0)
    End

    It create an node with position and data
      let position = [2, 3]
      let data = ['+-----+']
      let node = bellforest#Node#new(position, data)
      Assert Equals(node._position, position)
      Assert Equals(node._data, data)
      Assert Equals(node._width, len(data[0]))
      Assert Equals(node._height, len(data))
    End
  End

  Describe .set_data(list)
    It set node's data
      let data = [ '!@#' ]
      call node.set_data(data)
      Assert Equals(node._data, data)
    End
  End

  Describe .set_position(position)
    It set node's relative position from parent
      let position = [2, 3]
      call node.set_position(position)
      Assert Equals(node._position, position)
    End
  End

  Describe .remove_from_parent()
    It is removed from Scene
      let scene = bellforest#Scene#new('NodeTest')
      call scene.add_child(node)
      call node.remove_from_parent()
      Assert Equals(len(scene.childs.data), 0)
    End

    It is removed from Node
      let node2 = bellforest#Node#new()
      call node.add_child(node2)
      call node2.remove_from_parent()
      Assert Equals(len(node._childs.data), 0)
    End
  End
End
